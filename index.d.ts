// Generated by dts-bundle v0.7.3

export class Button {
    constructor(action: string, onClick: (e: MouseEvent) => void);
    get(): HTMLButtonElement;
}

export class Canvas {
    constructor(width: string, height: string, lineWidth: number, color: string, imageName: string);
    get(): HTMLCanvasElement;
    setLineWidth(lineWidth: number): void;
    setColor(color: string): void;
    clear(): void;
    download(): void;
    undo(): void;
    redo(): void;
    setWidth(width: string): void;
    setHeight(height: string): void;
    setImageName(name: string): void;
}

export class ColorPicker {
    constructor(color: string, onChange: (value: string) => void);
    get(): HTMLInputElement;
    setColor(color: string): void;
}

type PaintPadOptions = {
    width?: string;
    height?: string;
    lineWidth?: number;
    lineWidthMin?: number;
    lineWidthMax?: number;
    color?: string;
    imageName?: string;
    hasSlider?: boolean;
    hasColorPicker?: boolean;
    isClearable?: boolean;
    isDownloadable?: boolean;
    isStateChangeable?: boolean;
};
export class PaintPad extends HTMLElement {
    constructor(opt?: PaintPadOptions);
    setWidth(width: string): void;
    setHeight(height: string): void;
    setLineWidth(lineWidth: number): void;
    setLineWidthMin(lineWidth: number): void;
    setLineWidthMax(lineWidth: number): void;
    setColor(color: string): void;
    setImageName(name: string): void;
    setSlider(isVisible: boolean): void;
    setColorPicker(isVisible: boolean): void;
    setClearable(isVisible: boolean): void;
    setDownloadable(isVisible: boolean): void;
    setStateChangeable(isVisible: boolean): void;
    clear(): void;
    download(): void;
    undo(): void;
    redo(): void;
    getDataURL(): string;
    getBlob(callback: BlobCallback, type?: string | undefined, quality?: number): void;
    static get observedAttributes(): string[];
}
export {};

export class Slider {
    constructor(min: number, max: number, value: number, onChange: (value: number) => void);
    get(): HTMLInputElement;
    setValue(value: number): void;
    setMinValue(value: number): void;
    setMaxValue(value: number): void;
}

export function getStyle(): HTMLStyleElement;

